/*
 * 接口文档
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BaseResponseLoginUserVO;
import io.swagger.client.model.BaseResponsePageUser;
import io.swagger.client.model.BaseResponseUser;
import io.swagger.client.model.BaseResponseboolean;
import io.swagger.client.model.BaseResponselong;
import io.swagger.client.model.DeleteRequest;
import io.swagger.client.model.UserAddRequest;
import io.swagger.client.model.UserLoginRequest;
import io.swagger.client.model.UserQueryRequest;
import io.swagger.client.model.UserRegisterRequest;
import io.swagger.client.model.UserUpdateMyRequest;
import io.swagger.client.model.UserUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserControllerApi {
    private ApiClient apiClient;

    public UserControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addUserUsingPOST
     * @param userAddRequest userAddRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call addUserUsingPOSTCall(UserAddRequest userAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userAddRequest;

        // create path and map variables
        String localVarPath = "/api/user/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserUsingPOSTValidateBeforeCall(UserAddRequest userAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userAddRequest' is set
        if (userAddRequest == null) {
            throw new ApiException("Missing the required parameter 'userAddRequest' when calling addUserUsingPOST(Async)");
        }
        

        okhttp3.Call call = addUserUsingPOSTCall(userAddRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * addUser
     * 
     * @param userAddRequest userAddRequest (required)
     * @return BaseResponselong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponselong addUserUsingPOST(UserAddRequest userAddRequest) throws ApiException {
        ApiResponse<BaseResponselong> resp = addUserUsingPOSTWithHttpInfo(userAddRequest);
        return resp.getData();
    }

    /**
     * addUser
     * 
     * @param userAddRequest userAddRequest (required)
     * @return ApiResponse&lt;BaseResponselong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponselong> addUserUsingPOSTWithHttpInfo(UserAddRequest userAddRequest) throws ApiException {
        okhttp3.Call call = addUserUsingPOSTValidateBeforeCall(userAddRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addUser (asynchronously)
     * 
     * @param userAddRequest userAddRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call addUserUsingPOSTAsync(UserAddRequest userAddRequest, final ApiCallback<BaseResponselong> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = addUserUsingPOSTValidateBeforeCall(userAddRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserUsingPOST
     * @param deleteRequest deleteRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteUserUsingPOSTCall(DeleteRequest deleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteRequest;

        // create path and map variables
        String localVarPath = "/api/user/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserUsingPOSTValidateBeforeCall(DeleteRequest deleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteRequest' is set
        if (deleteRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRequest' when calling deleteUserUsingPOST(Async)");
        }
        

        okhttp3.Call call = deleteUserUsingPOSTCall(deleteRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * deleteUser
     * 
     * @param deleteRequest deleteRequest (required)
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean deleteUserUsingPOST(DeleteRequest deleteRequest) throws ApiException {
        ApiResponse<BaseResponseboolean> resp = deleteUserUsingPOSTWithHttpInfo(deleteRequest);
        return resp.getData();
    }

    /**
     * deleteUser
     * 
     * @param deleteRequest deleteRequest (required)
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> deleteUserUsingPOSTWithHttpInfo(DeleteRequest deleteRequest) throws ApiException {
        okhttp3.Call call = deleteUserUsingPOSTValidateBeforeCall(deleteRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteUser (asynchronously)
     * 
     * @param deleteRequest deleteRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteUserUsingPOSTAsync(DeleteRequest deleteRequest, final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = deleteUserUsingPOSTValidateBeforeCall(deleteRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoginUserUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getLoginUserUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/get/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoginUserUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = getLoginUserUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * getLoginUser
     * 
     * @return BaseResponseLoginUserVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseLoginUserVO getLoginUserUsingGET() throws ApiException {
        ApiResponse<BaseResponseLoginUserVO> resp = getLoginUserUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * getLoginUser
     * 
     * @return ApiResponse&lt;BaseResponseLoginUserVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseLoginUserVO> getLoginUserUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call call = getLoginUserUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<BaseResponseLoginUserVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getLoginUser (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getLoginUserUsingGETAsync(final ApiCallback<BaseResponseLoginUserVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getLoginUserUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseLoginUserVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserByIdUsingGET
     * @param id id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getUserByIdUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByIdUsingGETValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = getUserByIdUsingGETCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getUserById
     * 
     * @param id id (optional)
     * @return BaseResponseUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseUser getUserByIdUsingGET(Long id) throws ApiException {
        ApiResponse<BaseResponseUser> resp = getUserByIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * getUserById
     * 
     * @param id id (optional)
     * @return ApiResponse&lt;BaseResponseUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseUser> getUserByIdUsingGETWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call call = getUserByIdUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getUserById (asynchronously)
     * 
     * @param id id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getUserByIdUsingGETAsync(Long id, final ApiCallback<BaseResponseUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getUserByIdUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listUserByPageUsingPOST
     * @param userQueryRequest userQueryRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listUserByPageUsingPOSTCall(UserQueryRequest userQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userQueryRequest;

        // create path and map variables
        String localVarPath = "/api/user/list/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserByPageUsingPOSTValidateBeforeCall(UserQueryRequest userQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userQueryRequest' is set
        if (userQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'userQueryRequest' when calling listUserByPageUsingPOST(Async)");
        }
        

        okhttp3.Call call = listUserByPageUsingPOSTCall(userQueryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * listUserByPage
     * 
     * @param userQueryRequest userQueryRequest (required)
     * @return BaseResponsePageUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponsePageUser listUserByPageUsingPOST(UserQueryRequest userQueryRequest) throws ApiException {
        ApiResponse<BaseResponsePageUser> resp = listUserByPageUsingPOSTWithHttpInfo(userQueryRequest);
        return resp.getData();
    }

    /**
     * listUserByPage
     * 
     * @param userQueryRequest userQueryRequest (required)
     * @return ApiResponse&lt;BaseResponsePageUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponsePageUser> listUserByPageUsingPOSTWithHttpInfo(UserQueryRequest userQueryRequest) throws ApiException {
        okhttp3.Call call = listUserByPageUsingPOSTValidateBeforeCall(userQueryRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponsePageUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listUserByPage (asynchronously)
     * 
     * @param userQueryRequest userQueryRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listUserByPageUsingPOSTAsync(UserQueryRequest userQueryRequest, final ApiCallback<BaseResponsePageUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listUserByPageUsingPOSTValidateBeforeCall(userQueryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponsePageUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMyUserUsingPOST
     * @param userUpdateMyRequest userUpdateMyRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateMyUserUsingPOSTCall(UserUpdateMyRequest userUpdateMyRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userUpdateMyRequest;

        // create path and map variables
        String localVarPath = "/api/user/update/my";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMyUserUsingPOSTValidateBeforeCall(UserUpdateMyRequest userUpdateMyRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUpdateMyRequest' is set
        if (userUpdateMyRequest == null) {
            throw new ApiException("Missing the required parameter 'userUpdateMyRequest' when calling updateMyUserUsingPOST(Async)");
        }
        

        okhttp3.Call call = updateMyUserUsingPOSTCall(userUpdateMyRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * updateMyUser
     * 
     * @param userUpdateMyRequest userUpdateMyRequest (required)
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean updateMyUserUsingPOST(UserUpdateMyRequest userUpdateMyRequest) throws ApiException {
        ApiResponse<BaseResponseboolean> resp = updateMyUserUsingPOSTWithHttpInfo(userUpdateMyRequest);
        return resp.getData();
    }

    /**
     * updateMyUser
     * 
     * @param userUpdateMyRequest userUpdateMyRequest (required)
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> updateMyUserUsingPOSTWithHttpInfo(UserUpdateMyRequest userUpdateMyRequest) throws ApiException {
        okhttp3.Call call = updateMyUserUsingPOSTValidateBeforeCall(userUpdateMyRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateMyUser (asynchronously)
     * 
     * @param userUpdateMyRequest userUpdateMyRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateMyUserUsingPOSTAsync(UserUpdateMyRequest userUpdateMyRequest, final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateMyUserUsingPOSTValidateBeforeCall(userUpdateMyRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserUsingPOST
     * @param userUpdateRequest userUpdateRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateUserUsingPOSTCall(UserUpdateRequest userUpdateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/user/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserUsingPOSTValidateBeforeCall(UserUpdateRequest userUpdateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUpdateRequest' is set
        if (userUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'userUpdateRequest' when calling updateUserUsingPOST(Async)");
        }
        

        okhttp3.Call call = updateUserUsingPOSTCall(userUpdateRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * updateUser
     * 
     * @param userUpdateRequest userUpdateRequest (required)
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean updateUserUsingPOST(UserUpdateRequest userUpdateRequest) throws ApiException {
        ApiResponse<BaseResponseboolean> resp = updateUserUsingPOSTWithHttpInfo(userUpdateRequest);
        return resp.getData();
    }

    /**
     * updateUser
     * 
     * @param userUpdateRequest userUpdateRequest (required)
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> updateUserUsingPOSTWithHttpInfo(UserUpdateRequest userUpdateRequest) throws ApiException {
        okhttp3.Call call = updateUserUsingPOSTValidateBeforeCall(userUpdateRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateUser (asynchronously)
     * 
     * @param userUpdateRequest userUpdateRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateUserUsingPOSTAsync(UserUpdateRequest userUpdateRequest, final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateUserUsingPOSTValidateBeforeCall(userUpdateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userLoginUsingPOST
     * @param userLoginRequest userLoginRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call userLoginUsingPOSTCall(UserLoginRequest userLoginRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userLoginRequest;

        // create path and map variables
        String localVarPath = "/api/user/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userLoginUsingPOSTValidateBeforeCall(UserLoginRequest userLoginRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userLoginRequest' is set
        if (userLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'userLoginRequest' when calling userLoginUsingPOST(Async)");
        }
        

        okhttp3.Call call = userLoginUsingPOSTCall(userLoginRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * userLogin
     * 
     * @param userLoginRequest userLoginRequest (required)
     * @return BaseResponseLoginUserVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseLoginUserVO userLoginUsingPOST(UserLoginRequest userLoginRequest) throws ApiException {
        ApiResponse<BaseResponseLoginUserVO> resp = userLoginUsingPOSTWithHttpInfo(userLoginRequest);
        return resp.getData();
    }

    /**
     * userLogin
     * 
     * @param userLoginRequest userLoginRequest (required)
     * @return ApiResponse&lt;BaseResponseLoginUserVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseLoginUserVO> userLoginUsingPOSTWithHttpInfo(UserLoginRequest userLoginRequest) throws ApiException {
        okhttp3.Call call = userLoginUsingPOSTValidateBeforeCall(userLoginRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseLoginUserVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * userLogin (asynchronously)
     * 
     * @param userLoginRequest userLoginRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call userLoginUsingPOSTAsync(UserLoginRequest userLoginRequest, final ApiCallback<BaseResponseLoginUserVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = userLoginUsingPOSTValidateBeforeCall(userLoginRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseLoginUserVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userLogoutUsingPOST
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call userLogoutUsingPOSTCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userLogoutUsingPOSTValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = userLogoutUsingPOSTCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * userLogout
     * 
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean userLogoutUsingPOST() throws ApiException {
        ApiResponse<BaseResponseboolean> resp = userLogoutUsingPOSTWithHttpInfo();
        return resp.getData();
    }

    /**
     * userLogout
     * 
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> userLogoutUsingPOSTWithHttpInfo() throws ApiException {
        okhttp3.Call call = userLogoutUsingPOSTValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * userLogout (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call userLogoutUsingPOSTAsync(final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = userLogoutUsingPOSTValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userRegisterUsingPOST
     * @param userRegisterRequest userRegisterRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call userRegisterUsingPOSTCall(UserRegisterRequest userRegisterRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userRegisterRequest;

        // create path and map variables
        String localVarPath = "/api/user/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userRegisterUsingPOSTValidateBeforeCall(UserRegisterRequest userRegisterRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userRegisterRequest' is set
        if (userRegisterRequest == null) {
            throw new ApiException("Missing the required parameter 'userRegisterRequest' when calling userRegisterUsingPOST(Async)");
        }
        

        okhttp3.Call call = userRegisterUsingPOSTCall(userRegisterRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * userRegister
     * 
     * @param userRegisterRequest userRegisterRequest (required)
     * @return BaseResponselong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponselong userRegisterUsingPOST(UserRegisterRequest userRegisterRequest) throws ApiException {
        ApiResponse<BaseResponselong> resp = userRegisterUsingPOSTWithHttpInfo(userRegisterRequest);
        return resp.getData();
    }

    /**
     * userRegister
     * 
     * @param userRegisterRequest userRegisterRequest (required)
     * @return ApiResponse&lt;BaseResponselong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponselong> userRegisterUsingPOSTWithHttpInfo(UserRegisterRequest userRegisterRequest) throws ApiException {
        okhttp3.Call call = userRegisterUsingPOSTValidateBeforeCall(userRegisterRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * userRegister (asynchronously)
     * 
     * @param userRegisterRequest userRegisterRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call userRegisterUsingPOSTAsync(UserRegisterRequest userRegisterRequest, final ApiCallback<BaseResponselong> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = userRegisterUsingPOSTValidateBeforeCall(userRegisterRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * 接口文档
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BaseResponseFinancialRecordVO;
import io.swagger.client.model.BaseResponsePageFinancialRecord;
import io.swagger.client.model.BaseResponsePageFinancialRecordVO;
import io.swagger.client.model.BaseResponseboolean;
import io.swagger.client.model.BaseResponselong;
import io.swagger.client.model.DeleteRequest;
import io.swagger.client.model.FinancialRecordAddRequest;
import io.swagger.client.model.FinancialRecordEditRequest;
import io.swagger.client.model.FinancialRecordQueryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FinancialRecordControllerApi {
    private ApiClient apiClient;

    public FinancialRecordControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FinancialRecordControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFinancialRecordUsingPOST
     * @param financialRecordAddRequest financialRecordAddRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call addFinancialRecordUsingPOSTCall(FinancialRecordAddRequest financialRecordAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = financialRecordAddRequest;

        // create path and map variables
        String localVarPath = "/api/financialRecord/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFinancialRecordUsingPOSTValidateBeforeCall(FinancialRecordAddRequest financialRecordAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financialRecordAddRequest' is set
        if (financialRecordAddRequest == null) {
            throw new ApiException("Missing the required parameter 'financialRecordAddRequest' when calling addFinancialRecordUsingPOST(Async)");
        }
        

        okhttp3.Call call = addFinancialRecordUsingPOSTCall(financialRecordAddRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * addFinancialRecord
     * 
     * @param financialRecordAddRequest financialRecordAddRequest (required)
     * @return BaseResponselong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponselong addFinancialRecordUsingPOST(FinancialRecordAddRequest financialRecordAddRequest) throws ApiException {
        ApiResponse<BaseResponselong> resp = addFinancialRecordUsingPOSTWithHttpInfo(financialRecordAddRequest);
        return resp.getData();
    }

    /**
     * addFinancialRecord
     * 
     * @param financialRecordAddRequest financialRecordAddRequest (required)
     * @return ApiResponse&lt;BaseResponselong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponselong> addFinancialRecordUsingPOSTWithHttpInfo(FinancialRecordAddRequest financialRecordAddRequest) throws ApiException {
        okhttp3.Call call = addFinancialRecordUsingPOSTValidateBeforeCall(financialRecordAddRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addFinancialRecord (asynchronously)
     * 
     * @param financialRecordAddRequest financialRecordAddRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call addFinancialRecordUsingPOSTAsync(FinancialRecordAddRequest financialRecordAddRequest, final ApiCallback<BaseResponselong> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = addFinancialRecordUsingPOSTValidateBeforeCall(financialRecordAddRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFinancialRecordUsingPOST
     * @param deleteRequest deleteRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteFinancialRecordUsingPOSTCall(DeleteRequest deleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteRequest;

        // create path and map variables
        String localVarPath = "/api/financialRecord/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFinancialRecordUsingPOSTValidateBeforeCall(DeleteRequest deleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteRequest' is set
        if (deleteRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRequest' when calling deleteFinancialRecordUsingPOST(Async)");
        }
        

        okhttp3.Call call = deleteFinancialRecordUsingPOSTCall(deleteRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * deleteFinancialRecord
     * 
     * @param deleteRequest deleteRequest (required)
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean deleteFinancialRecordUsingPOST(DeleteRequest deleteRequest) throws ApiException {
        ApiResponse<BaseResponseboolean> resp = deleteFinancialRecordUsingPOSTWithHttpInfo(deleteRequest);
        return resp.getData();
    }

    /**
     * deleteFinancialRecord
     * 
     * @param deleteRequest deleteRequest (required)
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> deleteFinancialRecordUsingPOSTWithHttpInfo(DeleteRequest deleteRequest) throws ApiException {
        okhttp3.Call call = deleteFinancialRecordUsingPOSTValidateBeforeCall(deleteRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteFinancialRecord (asynchronously)
     * 
     * @param deleteRequest deleteRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteFinancialRecordUsingPOSTAsync(DeleteRequest deleteRequest, final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = deleteFinancialRecordUsingPOSTValidateBeforeCall(deleteRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editFinancialRecordUsingPOST
     * @param financialRecordEditRequest financialRecordEditRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call editFinancialRecordUsingPOSTCall(FinancialRecordEditRequest financialRecordEditRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = financialRecordEditRequest;

        // create path and map variables
        String localVarPath = "/api/financialRecord/edit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editFinancialRecordUsingPOSTValidateBeforeCall(FinancialRecordEditRequest financialRecordEditRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financialRecordEditRequest' is set
        if (financialRecordEditRequest == null) {
            throw new ApiException("Missing the required parameter 'financialRecordEditRequest' when calling editFinancialRecordUsingPOST(Async)");
        }
        

        okhttp3.Call call = editFinancialRecordUsingPOSTCall(financialRecordEditRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * editFinancialRecord
     * 
     * @param financialRecordEditRequest financialRecordEditRequest (required)
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean editFinancialRecordUsingPOST(FinancialRecordEditRequest financialRecordEditRequest) throws ApiException {
        ApiResponse<BaseResponseboolean> resp = editFinancialRecordUsingPOSTWithHttpInfo(financialRecordEditRequest);
        return resp.getData();
    }

    /**
     * editFinancialRecord
     * 
     * @param financialRecordEditRequest financialRecordEditRequest (required)
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> editFinancialRecordUsingPOSTWithHttpInfo(FinancialRecordEditRequest financialRecordEditRequest) throws ApiException {
        okhttp3.Call call = editFinancialRecordUsingPOSTValidateBeforeCall(financialRecordEditRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * editFinancialRecord (asynchronously)
     * 
     * @param financialRecordEditRequest financialRecordEditRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call editFinancialRecordUsingPOSTAsync(FinancialRecordEditRequest financialRecordEditRequest, final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = editFinancialRecordUsingPOSTValidateBeforeCall(financialRecordEditRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFinancialRecordVOByIdUsingGET
     * @param id id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getFinancialRecordVOByIdUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/financialRecord/get/vo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinancialRecordVOByIdUsingGETValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = getFinancialRecordVOByIdUsingGETCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getFinancialRecordVOById
     * 
     * @param id id (optional)
     * @return BaseResponseFinancialRecordVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseFinancialRecordVO getFinancialRecordVOByIdUsingGET(Long id) throws ApiException {
        ApiResponse<BaseResponseFinancialRecordVO> resp = getFinancialRecordVOByIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * getFinancialRecordVOById
     * 
     * @param id id (optional)
     * @return ApiResponse&lt;BaseResponseFinancialRecordVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseFinancialRecordVO> getFinancialRecordVOByIdUsingGETWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call call = getFinancialRecordVOByIdUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseFinancialRecordVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getFinancialRecordVOById (asynchronously)
     * 
     * @param id id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getFinancialRecordVOByIdUsingGETAsync(Long id, final ApiCallback<BaseResponseFinancialRecordVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getFinancialRecordVOByIdUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseFinancialRecordVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listFinancialRecordByPageUsingPOST
     * @param financialRecordQueryRequest financialRecordQueryRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listFinancialRecordByPageUsingPOSTCall(FinancialRecordQueryRequest financialRecordQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = financialRecordQueryRequest;

        // create path and map variables
        String localVarPath = "/api/financialRecord/list/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFinancialRecordByPageUsingPOSTValidateBeforeCall(FinancialRecordQueryRequest financialRecordQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financialRecordQueryRequest' is set
        if (financialRecordQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'financialRecordQueryRequest' when calling listFinancialRecordByPageUsingPOST(Async)");
        }
        

        okhttp3.Call call = listFinancialRecordByPageUsingPOSTCall(financialRecordQueryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * listFinancialRecordByPage
     * 
     * @param financialRecordQueryRequest financialRecordQueryRequest (required)
     * @return BaseResponsePageFinancialRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponsePageFinancialRecord listFinancialRecordByPageUsingPOST(FinancialRecordQueryRequest financialRecordQueryRequest) throws ApiException {
        ApiResponse<BaseResponsePageFinancialRecord> resp = listFinancialRecordByPageUsingPOSTWithHttpInfo(financialRecordQueryRequest);
        return resp.getData();
    }

    /**
     * listFinancialRecordByPage
     * 
     * @param financialRecordQueryRequest financialRecordQueryRequest (required)
     * @return ApiResponse&lt;BaseResponsePageFinancialRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponsePageFinancialRecord> listFinancialRecordByPageUsingPOSTWithHttpInfo(FinancialRecordQueryRequest financialRecordQueryRequest) throws ApiException {
        okhttp3.Call call = listFinancialRecordByPageUsingPOSTValidateBeforeCall(financialRecordQueryRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponsePageFinancialRecord>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listFinancialRecordByPage (asynchronously)
     * 
     * @param financialRecordQueryRequest financialRecordQueryRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listFinancialRecordByPageUsingPOSTAsync(FinancialRecordQueryRequest financialRecordQueryRequest, final ApiCallback<BaseResponsePageFinancialRecord> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listFinancialRecordByPageUsingPOSTValidateBeforeCall(financialRecordQueryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponsePageFinancialRecord>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listMyFinancialRecordVOByPageUsingPOST
     * @param financialRecordQueryRequest financialRecordQueryRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listMyFinancialRecordVOByPageUsingPOSTCall(FinancialRecordQueryRequest financialRecordQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = financialRecordQueryRequest;

        // create path and map variables
        String localVarPath = "/api/financialRecord/my/list/page/vo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMyFinancialRecordVOByPageUsingPOSTValidateBeforeCall(FinancialRecordQueryRequest financialRecordQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financialRecordQueryRequest' is set
        if (financialRecordQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'financialRecordQueryRequest' when calling listMyFinancialRecordVOByPageUsingPOST(Async)");
        }
        

        okhttp3.Call call = listMyFinancialRecordVOByPageUsingPOSTCall(financialRecordQueryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * listMyFinancialRecordVOByPage
     * 
     * @param financialRecordQueryRequest financialRecordQueryRequest (required)
     * @return BaseResponsePageFinancialRecordVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponsePageFinancialRecordVO listMyFinancialRecordVOByPageUsingPOST(FinancialRecordQueryRequest financialRecordQueryRequest) throws ApiException {
        ApiResponse<BaseResponsePageFinancialRecordVO> resp = listMyFinancialRecordVOByPageUsingPOSTWithHttpInfo(financialRecordQueryRequest);
        return resp.getData();
    }

    /**
     * listMyFinancialRecordVOByPage
     * 
     * @param financialRecordQueryRequest financialRecordQueryRequest (required)
     * @return ApiResponse&lt;BaseResponsePageFinancialRecordVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponsePageFinancialRecordVO> listMyFinancialRecordVOByPageUsingPOSTWithHttpInfo(FinancialRecordQueryRequest financialRecordQueryRequest) throws ApiException {
        okhttp3.Call call = listMyFinancialRecordVOByPageUsingPOSTValidateBeforeCall(financialRecordQueryRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponsePageFinancialRecordVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listMyFinancialRecordVOByPage (asynchronously)
     * 
     * @param financialRecordQueryRequest financialRecordQueryRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listMyFinancialRecordVOByPageUsingPOSTAsync(FinancialRecordQueryRequest financialRecordQueryRequest, final ApiCallback<BaseResponsePageFinancialRecordVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listMyFinancialRecordVOByPageUsingPOSTValidateBeforeCall(financialRecordQueryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponsePageFinancialRecordVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

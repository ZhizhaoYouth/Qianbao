/*
 * 接口文档
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BaseResponseBudgetVO;
import io.swagger.client.model.BaseResponseListstring;
import io.swagger.client.model.BaseResponsePageBudget;
import io.swagger.client.model.BaseResponsePageBudgetVO;
import io.swagger.client.model.BaseResponseboolean;
import io.swagger.client.model.BaseResponselong;
import io.swagger.client.model.BudgetAddRequest;
import io.swagger.client.model.BudgetEditRequest;
import io.swagger.client.model.BudgetQueryRequest;
import io.swagger.client.model.DeleteRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BudgetControllerApi {
    private ApiClient apiClient;

    public BudgetControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BudgetControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addBudgetUsingPOST
     * @param budgetAddRequest budgetAddRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call addBudgetUsingPOSTCall(BudgetAddRequest budgetAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = budgetAddRequest;

        // create path and map variables
        String localVarPath = "/api/budget/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBudgetUsingPOSTValidateBeforeCall(BudgetAddRequest budgetAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetAddRequest' is set
        if (budgetAddRequest == null) {
            throw new ApiException("Missing the required parameter 'budgetAddRequest' when calling addBudgetUsingPOST(Async)");
        }
        

        okhttp3.Call call = addBudgetUsingPOSTCall(budgetAddRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * addBudget
     * 
     * @param budgetAddRequest budgetAddRequest (required)
     * @return BaseResponselong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponselong addBudgetUsingPOST(BudgetAddRequest budgetAddRequest) throws ApiException {
        ApiResponse<BaseResponselong> resp = addBudgetUsingPOSTWithHttpInfo(budgetAddRequest);
        return resp.getData();
    }

    /**
     * addBudget
     * 
     * @param budgetAddRequest budgetAddRequest (required)
     * @return ApiResponse&lt;BaseResponselong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponselong> addBudgetUsingPOSTWithHttpInfo(BudgetAddRequest budgetAddRequest) throws ApiException {
        okhttp3.Call call = addBudgetUsingPOSTValidateBeforeCall(budgetAddRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addBudget (asynchronously)
     * 
     * @param budgetAddRequest budgetAddRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call addBudgetUsingPOSTAsync(BudgetAddRequest budgetAddRequest, final ApiCallback<BaseResponselong> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = addBudgetUsingPOSTValidateBeforeCall(budgetAddRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkBudgetExceedUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call checkBudgetExceedUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/budget/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkBudgetExceedUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = checkBudgetExceedUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * checkBudgetExceed
     * 
     * @return BaseResponseListstring
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseListstring checkBudgetExceedUsingGET() throws ApiException {
        ApiResponse<BaseResponseListstring> resp = checkBudgetExceedUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * checkBudgetExceed
     * 
     * @return ApiResponse&lt;BaseResponseListstring&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseListstring> checkBudgetExceedUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call call = checkBudgetExceedUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<BaseResponseListstring>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * checkBudgetExceed (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call checkBudgetExceedUsingGETAsync(final ApiCallback<BaseResponseListstring> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = checkBudgetExceedUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseListstring>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBudgetUsingPOST
     * @param deleteRequest deleteRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteBudgetUsingPOSTCall(DeleteRequest deleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteRequest;

        // create path and map variables
        String localVarPath = "/api/budget/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBudgetUsingPOSTValidateBeforeCall(DeleteRequest deleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteRequest' is set
        if (deleteRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRequest' when calling deleteBudgetUsingPOST(Async)");
        }
        

        okhttp3.Call call = deleteBudgetUsingPOSTCall(deleteRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * deleteBudget
     * 
     * @param deleteRequest deleteRequest (required)
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean deleteBudgetUsingPOST(DeleteRequest deleteRequest) throws ApiException {
        ApiResponse<BaseResponseboolean> resp = deleteBudgetUsingPOSTWithHttpInfo(deleteRequest);
        return resp.getData();
    }

    /**
     * deleteBudget
     * 
     * @param deleteRequest deleteRequest (required)
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> deleteBudgetUsingPOSTWithHttpInfo(DeleteRequest deleteRequest) throws ApiException {
        okhttp3.Call call = deleteBudgetUsingPOSTValidateBeforeCall(deleteRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteBudget (asynchronously)
     * 
     * @param deleteRequest deleteRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteBudgetUsingPOSTAsync(DeleteRequest deleteRequest, final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = deleteBudgetUsingPOSTValidateBeforeCall(deleteRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editBudgetUsingPOST
     * @param budgetEditRequest budgetEditRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call editBudgetUsingPOSTCall(BudgetEditRequest budgetEditRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = budgetEditRequest;

        // create path and map variables
        String localVarPath = "/api/budget/edit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editBudgetUsingPOSTValidateBeforeCall(BudgetEditRequest budgetEditRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetEditRequest' is set
        if (budgetEditRequest == null) {
            throw new ApiException("Missing the required parameter 'budgetEditRequest' when calling editBudgetUsingPOST(Async)");
        }
        

        okhttp3.Call call = editBudgetUsingPOSTCall(budgetEditRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * editBudget
     * 
     * @param budgetEditRequest budgetEditRequest (required)
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean editBudgetUsingPOST(BudgetEditRequest budgetEditRequest) throws ApiException {
        ApiResponse<BaseResponseboolean> resp = editBudgetUsingPOSTWithHttpInfo(budgetEditRequest);
        return resp.getData();
    }

    /**
     * editBudget
     * 
     * @param budgetEditRequest budgetEditRequest (required)
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> editBudgetUsingPOSTWithHttpInfo(BudgetEditRequest budgetEditRequest) throws ApiException {
        okhttp3.Call call = editBudgetUsingPOSTValidateBeforeCall(budgetEditRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * editBudget (asynchronously)
     * 
     * @param budgetEditRequest budgetEditRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call editBudgetUsingPOSTAsync(BudgetEditRequest budgetEditRequest, final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = editBudgetUsingPOSTValidateBeforeCall(budgetEditRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBudgetVOByIdUsingGET
     * @param id id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getBudgetVOByIdUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/budget/get/vo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBudgetVOByIdUsingGETValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = getBudgetVOByIdUsingGETCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getBudgetVOById
     * 
     * @param id id (optional)
     * @return BaseResponseBudgetVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseBudgetVO getBudgetVOByIdUsingGET(Long id) throws ApiException {
        ApiResponse<BaseResponseBudgetVO> resp = getBudgetVOByIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * getBudgetVOById
     * 
     * @param id id (optional)
     * @return ApiResponse&lt;BaseResponseBudgetVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseBudgetVO> getBudgetVOByIdUsingGETWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call call = getBudgetVOByIdUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseBudgetVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getBudgetVOById (asynchronously)
     * 
     * @param id id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getBudgetVOByIdUsingGETAsync(Long id, final ApiCallback<BaseResponseBudgetVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getBudgetVOByIdUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseBudgetVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBudgetByPageUsingPOST
     * @param budgetQueryRequest budgetQueryRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listBudgetByPageUsingPOSTCall(BudgetQueryRequest budgetQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = budgetQueryRequest;

        // create path and map variables
        String localVarPath = "/api/budget/list/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBudgetByPageUsingPOSTValidateBeforeCall(BudgetQueryRequest budgetQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetQueryRequest' is set
        if (budgetQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'budgetQueryRequest' when calling listBudgetByPageUsingPOST(Async)");
        }
        

        okhttp3.Call call = listBudgetByPageUsingPOSTCall(budgetQueryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * listBudgetByPage
     * 
     * @param budgetQueryRequest budgetQueryRequest (required)
     * @return BaseResponsePageBudget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponsePageBudget listBudgetByPageUsingPOST(BudgetQueryRequest budgetQueryRequest) throws ApiException {
        ApiResponse<BaseResponsePageBudget> resp = listBudgetByPageUsingPOSTWithHttpInfo(budgetQueryRequest);
        return resp.getData();
    }

    /**
     * listBudgetByPage
     * 
     * @param budgetQueryRequest budgetQueryRequest (required)
     * @return ApiResponse&lt;BaseResponsePageBudget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponsePageBudget> listBudgetByPageUsingPOSTWithHttpInfo(BudgetQueryRequest budgetQueryRequest) throws ApiException {
        okhttp3.Call call = listBudgetByPageUsingPOSTValidateBeforeCall(budgetQueryRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponsePageBudget>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listBudgetByPage (asynchronously)
     * 
     * @param budgetQueryRequest budgetQueryRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listBudgetByPageUsingPOSTAsync(BudgetQueryRequest budgetQueryRequest, final ApiCallback<BaseResponsePageBudget> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listBudgetByPageUsingPOSTValidateBeforeCall(budgetQueryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponsePageBudget>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listMyBudgetVOByPageUsingPOST
     * @param budgetQueryRequest budgetQueryRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listMyBudgetVOByPageUsingPOSTCall(BudgetQueryRequest budgetQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = budgetQueryRequest;

        // create path and map variables
        String localVarPath = "/api/budget/my/list/page/vo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMyBudgetVOByPageUsingPOSTValidateBeforeCall(BudgetQueryRequest budgetQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetQueryRequest' is set
        if (budgetQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'budgetQueryRequest' when calling listMyBudgetVOByPageUsingPOST(Async)");
        }
        

        okhttp3.Call call = listMyBudgetVOByPageUsingPOSTCall(budgetQueryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * listMyBudgetVOByPage
     * 
     * @param budgetQueryRequest budgetQueryRequest (required)
     * @return BaseResponsePageBudgetVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponsePageBudgetVO listMyBudgetVOByPageUsingPOST(BudgetQueryRequest budgetQueryRequest) throws ApiException {
        ApiResponse<BaseResponsePageBudgetVO> resp = listMyBudgetVOByPageUsingPOSTWithHttpInfo(budgetQueryRequest);
        return resp.getData();
    }

    /**
     * listMyBudgetVOByPage
     * 
     * @param budgetQueryRequest budgetQueryRequest (required)
     * @return ApiResponse&lt;BaseResponsePageBudgetVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponsePageBudgetVO> listMyBudgetVOByPageUsingPOSTWithHttpInfo(BudgetQueryRequest budgetQueryRequest) throws ApiException {
        okhttp3.Call call = listMyBudgetVOByPageUsingPOSTValidateBeforeCall(budgetQueryRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponsePageBudgetVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listMyBudgetVOByPage (asynchronously)
     * 
     * @param budgetQueryRequest budgetQueryRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listMyBudgetVOByPageUsingPOSTAsync(BudgetQueryRequest budgetQueryRequest, final ApiCallback<BaseResponsePageBudgetVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listMyBudgetVOByPageUsingPOSTValidateBeforeCall(budgetQueryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponsePageBudgetVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

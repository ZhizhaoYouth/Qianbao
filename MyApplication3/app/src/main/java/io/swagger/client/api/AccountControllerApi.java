/*
 * 接口文档
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccountAddRequest;
import io.swagger.client.model.AccountEditRequest;
import io.swagger.client.model.AccountQueryRequest;
import io.swagger.client.model.BaseResponseAccountDetailsVO;
import io.swagger.client.model.BaseResponseAccountVO;
import io.swagger.client.model.BaseResponseBankInfo;
import io.swagger.client.model.BaseResponsePageAccount;
import io.swagger.client.model.BaseResponsePageAccountVO;
import io.swagger.client.model.BaseResponsebigdecimal;
import io.swagger.client.model.BaseResponseboolean;
import io.swagger.client.model.BaseResponselong;
import io.swagger.client.model.CardRequest;
import io.swagger.client.model.DeleteRequest;
import io.swagger.client.model.ReviewRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountControllerApi {
    private ApiClient apiClient;

    public AccountControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addAccountUsingPOST
     * @param accountAddRequest accountAddRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call addAccountUsingPOSTCall(AccountAddRequest accountAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountAddRequest;

        // create path and map variables
        String localVarPath = "/api/account/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountUsingPOSTValidateBeforeCall(AccountAddRequest accountAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountAddRequest' is set
        if (accountAddRequest == null) {
            throw new ApiException("Missing the required parameter 'accountAddRequest' when calling addAccountUsingPOST(Async)");
        }
        

        okhttp3.Call call = addAccountUsingPOSTCall(accountAddRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * addAccount
     * 
     * @param accountAddRequest accountAddRequest (required)
     * @return BaseResponselong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponselong addAccountUsingPOST(AccountAddRequest accountAddRequest) throws ApiException {
        ApiResponse<BaseResponselong> resp = addAccountUsingPOSTWithHttpInfo(accountAddRequest);
        return resp.getData();
    }

    /**
     * addAccount
     * 
     * @param accountAddRequest accountAddRequest (required)
     * @return ApiResponse&lt;BaseResponselong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponselong> addAccountUsingPOSTWithHttpInfo(AccountAddRequest accountAddRequest) throws ApiException {
        okhttp3.Call call = addAccountUsingPOSTValidateBeforeCall(accountAddRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addAccount (asynchronously)
     * 
     * @param accountAddRequest accountAddRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call addAccountUsingPOSTAsync(AccountAddRequest accountAddRequest, final ApiCallback<BaseResponselong> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = addAccountUsingPOSTValidateBeforeCall(accountAddRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkAccountUsingPOST
     * @param cardRequest cardRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call checkAccountUsingPOSTCall(CardRequest cardRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cardRequest;

        // create path and map variables
        String localVarPath = "/api/account/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkAccountUsingPOSTValidateBeforeCall(CardRequest cardRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cardRequest' is set
        if (cardRequest == null) {
            throw new ApiException("Missing the required parameter 'cardRequest' when calling checkAccountUsingPOST(Async)");
        }
        

        okhttp3.Call call = checkAccountUsingPOSTCall(cardRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * checkAccount
     * 
     * @param cardRequest cardRequest (required)
     * @return BaseResponseBankInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseBankInfo checkAccountUsingPOST(CardRequest cardRequest) throws ApiException {
        ApiResponse<BaseResponseBankInfo> resp = checkAccountUsingPOSTWithHttpInfo(cardRequest);
        return resp.getData();
    }

    /**
     * checkAccount
     * 
     * @param cardRequest cardRequest (required)
     * @return ApiResponse&lt;BaseResponseBankInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseBankInfo> checkAccountUsingPOSTWithHttpInfo(CardRequest cardRequest) throws ApiException {
        okhttp3.Call call = checkAccountUsingPOSTValidateBeforeCall(cardRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseBankInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * checkAccount (asynchronously)
     * 
     * @param cardRequest cardRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call checkAccountUsingPOSTAsync(CardRequest cardRequest, final ApiCallback<BaseResponseBankInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = checkAccountUsingPOSTValidateBeforeCall(cardRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseBankInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAccountUsingPOST
     * @param deleteRequest deleteRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteAccountUsingPOSTCall(DeleteRequest deleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteRequest;

        // create path and map variables
        String localVarPath = "/api/account/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountUsingPOSTValidateBeforeCall(DeleteRequest deleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteRequest' is set
        if (deleteRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRequest' when calling deleteAccountUsingPOST(Async)");
        }
        

        okhttp3.Call call = deleteAccountUsingPOSTCall(deleteRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * deleteAccount
     * 
     * @param deleteRequest deleteRequest (required)
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean deleteAccountUsingPOST(DeleteRequest deleteRequest) throws ApiException {
        ApiResponse<BaseResponseboolean> resp = deleteAccountUsingPOSTWithHttpInfo(deleteRequest);
        return resp.getData();
    }

    /**
     * deleteAccount
     * 
     * @param deleteRequest deleteRequest (required)
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> deleteAccountUsingPOSTWithHttpInfo(DeleteRequest deleteRequest) throws ApiException {
        okhttp3.Call call = deleteAccountUsingPOSTValidateBeforeCall(deleteRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteAccount (asynchronously)
     * 
     * @param deleteRequest deleteRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteAccountUsingPOSTAsync(DeleteRequest deleteRequest, final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = deleteAccountUsingPOSTValidateBeforeCall(deleteRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for doAccountReviewUsingPOST
     * @param reviewRequest reviewRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call doAccountReviewUsingPOSTCall(ReviewRequest reviewRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reviewRequest;

        // create path and map variables
        String localVarPath = "/api/account/review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doAccountReviewUsingPOSTValidateBeforeCall(ReviewRequest reviewRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reviewRequest' is set
        if (reviewRequest == null) {
            throw new ApiException("Missing the required parameter 'reviewRequest' when calling doAccountReviewUsingPOST(Async)");
        }
        

        okhttp3.Call call = doAccountReviewUsingPOSTCall(reviewRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * doAccountReview
     * 
     * @param reviewRequest reviewRequest (required)
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean doAccountReviewUsingPOST(ReviewRequest reviewRequest) throws ApiException {
        ApiResponse<BaseResponseboolean> resp = doAccountReviewUsingPOSTWithHttpInfo(reviewRequest);
        return resp.getData();
    }

    /**
     * doAccountReview
     * 
     * @param reviewRequest reviewRequest (required)
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> doAccountReviewUsingPOSTWithHttpInfo(ReviewRequest reviewRequest) throws ApiException {
        okhttp3.Call call = doAccountReviewUsingPOSTValidateBeforeCall(reviewRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * doAccountReview (asynchronously)
     * 
     * @param reviewRequest reviewRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call doAccountReviewUsingPOSTAsync(ReviewRequest reviewRequest, final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = doAccountReviewUsingPOSTValidateBeforeCall(reviewRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editAccountUsingPOST
     * @param accountEditRequest accountEditRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call editAccountUsingPOSTCall(AccountEditRequest accountEditRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountEditRequest;

        // create path and map variables
        String localVarPath = "/api/account/edit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editAccountUsingPOSTValidateBeforeCall(AccountEditRequest accountEditRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountEditRequest' is set
        if (accountEditRequest == null) {
            throw new ApiException("Missing the required parameter 'accountEditRequest' when calling editAccountUsingPOST(Async)");
        }
        

        okhttp3.Call call = editAccountUsingPOSTCall(accountEditRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * editAccount
     * 
     * @param accountEditRequest accountEditRequest (required)
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean editAccountUsingPOST(AccountEditRequest accountEditRequest) throws ApiException {
        ApiResponse<BaseResponseboolean> resp = editAccountUsingPOSTWithHttpInfo(accountEditRequest);
        return resp.getData();
    }

    /**
     * editAccount
     * 
     * @param accountEditRequest accountEditRequest (required)
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> editAccountUsingPOSTWithHttpInfo(AccountEditRequest accountEditRequest) throws ApiException {
        okhttp3.Call call = editAccountUsingPOSTValidateBeforeCall(accountEditRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * editAccount (asynchronously)
     * 
     * @param accountEditRequest accountEditRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call editAccountUsingPOSTAsync(AccountEditRequest accountEditRequest, final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = editAccountUsingPOSTValidateBeforeCall(accountEditRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountDetailsPagesUsingPOST
     * @param id id (required)
     * @param budgetCurrent budgetCurrent (optional, default to 1)
     * @param budgetSize budgetSize (optional, default to 10)
     * @param recordCurrent recordCurrent (optional, default to 1)
     * @param recordSize recordSize (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getAccountDetailsPagesUsingPOSTCall(Long id, Long budgetCurrent, Long budgetSize, Long recordCurrent, Long recordSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/account/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (budgetCurrent != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("budgetCurrent", budgetCurrent));
        if (budgetSize != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("budgetSize", budgetSize));
        if (id != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (recordCurrent != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("recordCurrent", recordCurrent));
        if (recordSize != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("recordSize", recordSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountDetailsPagesUsingPOSTValidateBeforeCall(Long id, Long budgetCurrent, Long budgetSize, Long recordCurrent, Long recordSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAccountDetailsPagesUsingPOST(Async)");
        }
        

        okhttp3.Call call = getAccountDetailsPagesUsingPOSTCall(id, budgetCurrent, budgetSize, recordCurrent, recordSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getAccountDetailsPages
     * 
     * @param id id (required)
     * @param budgetCurrent budgetCurrent (optional, default to 1)
     * @param budgetSize budgetSize (optional, default to 10)
     * @param recordCurrent recordCurrent (optional, default to 1)
     * @param recordSize recordSize (optional, default to 10)
     * @return BaseResponseAccountDetailsVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseAccountDetailsVO getAccountDetailsPagesUsingPOST(Long id, Long budgetCurrent, Long budgetSize, Long recordCurrent, Long recordSize) throws ApiException {
        ApiResponse<BaseResponseAccountDetailsVO> resp = getAccountDetailsPagesUsingPOSTWithHttpInfo(id, budgetCurrent, budgetSize, recordCurrent, recordSize);
        return resp.getData();
    }

    /**
     * getAccountDetailsPages
     * 
     * @param id id (required)
     * @param budgetCurrent budgetCurrent (optional, default to 1)
     * @param budgetSize budgetSize (optional, default to 10)
     * @param recordCurrent recordCurrent (optional, default to 1)
     * @param recordSize recordSize (optional, default to 10)
     * @return ApiResponse&lt;BaseResponseAccountDetailsVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseAccountDetailsVO> getAccountDetailsPagesUsingPOSTWithHttpInfo(Long id, Long budgetCurrent, Long budgetSize, Long recordCurrent, Long recordSize) throws ApiException {
        okhttp3.Call call = getAccountDetailsPagesUsingPOSTValidateBeforeCall(id, budgetCurrent, budgetSize, recordCurrent, recordSize, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseAccountDetailsVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccountDetailsPages (asynchronously)
     * 
     * @param id id (required)
     * @param budgetCurrent budgetCurrent (optional, default to 1)
     * @param budgetSize budgetSize (optional, default to 10)
     * @param recordCurrent recordCurrent (optional, default to 1)
     * @param recordSize recordSize (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getAccountDetailsPagesUsingPOSTAsync(Long id, Long budgetCurrent, Long budgetSize, Long recordCurrent, Long recordSize, final ApiCallback<BaseResponseAccountDetailsVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getAccountDetailsPagesUsingPOSTValidateBeforeCall(id, budgetCurrent, budgetSize, recordCurrent, recordSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseAccountDetailsVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountVOByIdUsingGET
     * @param id id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getAccountVOByIdUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/account/get/vo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountVOByIdUsingGETValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = getAccountVOByIdUsingGETCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getAccountVOById
     * 
     * @param id id (optional)
     * @return BaseResponseAccountVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseAccountVO getAccountVOByIdUsingGET(Long id) throws ApiException {
        ApiResponse<BaseResponseAccountVO> resp = getAccountVOByIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * getAccountVOById
     * 
     * @param id id (optional)
     * @return ApiResponse&lt;BaseResponseAccountVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseAccountVO> getAccountVOByIdUsingGETWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call call = getAccountVOByIdUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseAccountVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccountVOById (asynchronously)
     * 
     * @param id id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getAccountVOByIdUsingGETAsync(Long id, final ApiCallback<BaseResponseAccountVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getAccountVOByIdUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseAccountVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllMyBalanceUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getAllMyBalanceUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/account/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllMyBalanceUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = getAllMyBalanceUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * getAllMyBalance
     * 
     * @return BaseResponsebigdecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponsebigdecimal getAllMyBalanceUsingGET() throws ApiException {
        ApiResponse<BaseResponsebigdecimal> resp = getAllMyBalanceUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * getAllMyBalance
     * 
     * @return ApiResponse&lt;BaseResponsebigdecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponsebigdecimal> getAllMyBalanceUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call call = getAllMyBalanceUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<BaseResponsebigdecimal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllMyBalance (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getAllMyBalanceUsingGETAsync(final ApiCallback<BaseResponsebigdecimal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getAllMyBalanceUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponsebigdecimal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAccountByPageUsingPOST
     * @param accountQueryRequest accountQueryRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listAccountByPageUsingPOSTCall(AccountQueryRequest accountQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountQueryRequest;

        // create path and map variables
        String localVarPath = "/api/account/list/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountByPageUsingPOSTValidateBeforeCall(AccountQueryRequest accountQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountQueryRequest' is set
        if (accountQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'accountQueryRequest' when calling listAccountByPageUsingPOST(Async)");
        }
        

        okhttp3.Call call = listAccountByPageUsingPOSTCall(accountQueryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * listAccountByPage
     * 
     * @param accountQueryRequest accountQueryRequest (required)
     * @return BaseResponsePageAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponsePageAccount listAccountByPageUsingPOST(AccountQueryRequest accountQueryRequest) throws ApiException {
        ApiResponse<BaseResponsePageAccount> resp = listAccountByPageUsingPOSTWithHttpInfo(accountQueryRequest);
        return resp.getData();
    }

    /**
     * listAccountByPage
     * 
     * @param accountQueryRequest accountQueryRequest (required)
     * @return ApiResponse&lt;BaseResponsePageAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponsePageAccount> listAccountByPageUsingPOSTWithHttpInfo(AccountQueryRequest accountQueryRequest) throws ApiException {
        okhttp3.Call call = listAccountByPageUsingPOSTValidateBeforeCall(accountQueryRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponsePageAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listAccountByPage (asynchronously)
     * 
     * @param accountQueryRequest accountQueryRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listAccountByPageUsingPOSTAsync(AccountQueryRequest accountQueryRequest, final ApiCallback<BaseResponsePageAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listAccountByPageUsingPOSTValidateBeforeCall(accountQueryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponsePageAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listMyAccountVOByPageUsingPOST
     * @param accountQueryRequest accountQueryRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listMyAccountVOByPageUsingPOSTCall(AccountQueryRequest accountQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountQueryRequest;

        // create path and map variables
        String localVarPath = "/api/account/my/list/page/vo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMyAccountVOByPageUsingPOSTValidateBeforeCall(AccountQueryRequest accountQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountQueryRequest' is set
        if (accountQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'accountQueryRequest' when calling listMyAccountVOByPageUsingPOST(Async)");
        }
        

        okhttp3.Call call = listMyAccountVOByPageUsingPOSTCall(accountQueryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * listMyAccountVOByPage
     * 
     * @param accountQueryRequest accountQueryRequest (required)
     * @return BaseResponsePageAccountVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponsePageAccountVO listMyAccountVOByPageUsingPOST(AccountQueryRequest accountQueryRequest) throws ApiException {
        ApiResponse<BaseResponsePageAccountVO> resp = listMyAccountVOByPageUsingPOSTWithHttpInfo(accountQueryRequest);
        return resp.getData();
    }

    /**
     * listMyAccountVOByPage
     * 
     * @param accountQueryRequest accountQueryRequest (required)
     * @return ApiResponse&lt;BaseResponsePageAccountVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponsePageAccountVO> listMyAccountVOByPageUsingPOSTWithHttpInfo(AccountQueryRequest accountQueryRequest) throws ApiException {
        okhttp3.Call call = listMyAccountVOByPageUsingPOSTValidateBeforeCall(accountQueryRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponsePageAccountVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listMyAccountVOByPage (asynchronously)
     * 
     * @param accountQueryRequest accountQueryRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listMyAccountVOByPageUsingPOSTAsync(AccountQueryRequest accountQueryRequest, final ApiCallback<BaseResponsePageAccountVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listMyAccountVOByPageUsingPOSTValidateBeforeCall(accountQueryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponsePageAccountVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

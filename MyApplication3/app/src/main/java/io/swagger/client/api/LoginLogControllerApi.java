/*
 * 接口文档
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BaseResponseLoginLogVO;
import io.swagger.client.model.BaseResponsePageLoginLog;
import io.swagger.client.model.BaseResponsePageLoginLogVO;
import io.swagger.client.model.BaseResponseboolean;
import io.swagger.client.model.BaseResponselong;
import io.swagger.client.model.DeleteRequest;
import io.swagger.client.model.LoginLogAddRequest;
import io.swagger.client.model.LoginLogQueryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoginLogControllerApi {
    private ApiClient apiClient;

    public LoginLogControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoginLogControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addLoginLogUsingPOST
     * @param loginLogAddRequest loginLogAddRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call addLoginLogUsingPOSTCall(LoginLogAddRequest loginLogAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loginLogAddRequest;

        // create path and map variables
        String localVarPath = "/api/loginLog/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLoginLogUsingPOSTValidateBeforeCall(LoginLogAddRequest loginLogAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loginLogAddRequest' is set
        if (loginLogAddRequest == null) {
            throw new ApiException("Missing the required parameter 'loginLogAddRequest' when calling addLoginLogUsingPOST(Async)");
        }
        

        okhttp3.Call call = addLoginLogUsingPOSTCall(loginLogAddRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * addLoginLog
     * 
     * @param loginLogAddRequest loginLogAddRequest (required)
     * @return BaseResponselong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponselong addLoginLogUsingPOST(LoginLogAddRequest loginLogAddRequest) throws ApiException {
        ApiResponse<BaseResponselong> resp = addLoginLogUsingPOSTWithHttpInfo(loginLogAddRequest);
        return resp.getData();
    }

    /**
     * addLoginLog
     * 
     * @param loginLogAddRequest loginLogAddRequest (required)
     * @return ApiResponse&lt;BaseResponselong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponselong> addLoginLogUsingPOSTWithHttpInfo(LoginLogAddRequest loginLogAddRequest) throws ApiException {
        okhttp3.Call call = addLoginLogUsingPOSTValidateBeforeCall(loginLogAddRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addLoginLog (asynchronously)
     * 
     * @param loginLogAddRequest loginLogAddRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call addLoginLogUsingPOSTAsync(LoginLogAddRequest loginLogAddRequest, final ApiCallback<BaseResponselong> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = addLoginLogUsingPOSTValidateBeforeCall(loginLogAddRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponselong>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLoginLogUsingPOST
     * @param deleteRequest deleteRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteLoginLogUsingPOSTCall(DeleteRequest deleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteRequest;

        // create path and map variables
        String localVarPath = "/api/loginLog/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoginLogUsingPOSTValidateBeforeCall(DeleteRequest deleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteRequest' is set
        if (deleteRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRequest' when calling deleteLoginLogUsingPOST(Async)");
        }
        

        okhttp3.Call call = deleteLoginLogUsingPOSTCall(deleteRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * deleteLoginLog
     * 
     * @param deleteRequest deleteRequest (required)
     * @return BaseResponseboolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseboolean deleteLoginLogUsingPOST(DeleteRequest deleteRequest) throws ApiException {
        ApiResponse<BaseResponseboolean> resp = deleteLoginLogUsingPOSTWithHttpInfo(deleteRequest);
        return resp.getData();
    }

    /**
     * deleteLoginLog
     * 
     * @param deleteRequest deleteRequest (required)
     * @return ApiResponse&lt;BaseResponseboolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseboolean> deleteLoginLogUsingPOSTWithHttpInfo(DeleteRequest deleteRequest) throws ApiException {
        okhttp3.Call call = deleteLoginLogUsingPOSTValidateBeforeCall(deleteRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteLoginLog (asynchronously)
     * 
     * @param deleteRequest deleteRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteLoginLogUsingPOSTAsync(DeleteRequest deleteRequest, final ApiCallback<BaseResponseboolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = deleteLoginLogUsingPOSTValidateBeforeCall(deleteRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseboolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoginLogVOByIdUsingGET
     * @param id id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getLoginLogVOByIdUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/loginLog/get/vo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoginLogVOByIdUsingGETValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = getLoginLogVOByIdUsingGETCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getLoginLogVOById
     * 
     * @param id id (optional)
     * @return BaseResponseLoginLogVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseLoginLogVO getLoginLogVOByIdUsingGET(Long id) throws ApiException {
        ApiResponse<BaseResponseLoginLogVO> resp = getLoginLogVOByIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * getLoginLogVOById
     * 
     * @param id id (optional)
     * @return ApiResponse&lt;BaseResponseLoginLogVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseLoginLogVO> getLoginLogVOByIdUsingGETWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call call = getLoginLogVOByIdUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseLoginLogVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getLoginLogVOById (asynchronously)
     * 
     * @param id id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getLoginLogVOByIdUsingGETAsync(Long id, final ApiCallback<BaseResponseLoginLogVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getLoginLogVOByIdUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseLoginLogVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLoginLogByPageUsingPOST
     * @param loginLogQueryRequest loginLogQueryRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listLoginLogByPageUsingPOSTCall(LoginLogQueryRequest loginLogQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loginLogQueryRequest;

        // create path and map variables
        String localVarPath = "/api/loginLog/list/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoginLogByPageUsingPOSTValidateBeforeCall(LoginLogQueryRequest loginLogQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loginLogQueryRequest' is set
        if (loginLogQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'loginLogQueryRequest' when calling listLoginLogByPageUsingPOST(Async)");
        }
        

        okhttp3.Call call = listLoginLogByPageUsingPOSTCall(loginLogQueryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * listLoginLogByPage
     * 
     * @param loginLogQueryRequest loginLogQueryRequest (required)
     * @return BaseResponsePageLoginLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponsePageLoginLog listLoginLogByPageUsingPOST(LoginLogQueryRequest loginLogQueryRequest) throws ApiException {
        ApiResponse<BaseResponsePageLoginLog> resp = listLoginLogByPageUsingPOSTWithHttpInfo(loginLogQueryRequest);
        return resp.getData();
    }

    /**
     * listLoginLogByPage
     * 
     * @param loginLogQueryRequest loginLogQueryRequest (required)
     * @return ApiResponse&lt;BaseResponsePageLoginLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponsePageLoginLog> listLoginLogByPageUsingPOSTWithHttpInfo(LoginLogQueryRequest loginLogQueryRequest) throws ApiException {
        okhttp3.Call call = listLoginLogByPageUsingPOSTValidateBeforeCall(loginLogQueryRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponsePageLoginLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listLoginLogByPage (asynchronously)
     * 
     * @param loginLogQueryRequest loginLogQueryRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listLoginLogByPageUsingPOSTAsync(LoginLogQueryRequest loginLogQueryRequest, final ApiCallback<BaseResponsePageLoginLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listLoginLogByPageUsingPOSTValidateBeforeCall(loginLogQueryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponsePageLoginLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listMyLoginLogVOByPageUsingPOST
     * @param loginLogQueryRequest loginLogQueryRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listMyLoginLogVOByPageUsingPOSTCall(LoginLogQueryRequest loginLogQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loginLogQueryRequest;

        // create path and map variables
        String localVarPath = "/api/loginLog/my/list/page/vo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMyLoginLogVOByPageUsingPOSTValidateBeforeCall(LoginLogQueryRequest loginLogQueryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loginLogQueryRequest' is set
        if (loginLogQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'loginLogQueryRequest' when calling listMyLoginLogVOByPageUsingPOST(Async)");
        }
        

        okhttp3.Call call = listMyLoginLogVOByPageUsingPOSTCall(loginLogQueryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * listMyLoginLogVOByPage
     * 
     * @param loginLogQueryRequest loginLogQueryRequest (required)
     * @return BaseResponsePageLoginLogVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponsePageLoginLogVO listMyLoginLogVOByPageUsingPOST(LoginLogQueryRequest loginLogQueryRequest) throws ApiException {
        ApiResponse<BaseResponsePageLoginLogVO> resp = listMyLoginLogVOByPageUsingPOSTWithHttpInfo(loginLogQueryRequest);
        return resp.getData();
    }

    /**
     * listMyLoginLogVOByPage
     * 
     * @param loginLogQueryRequest loginLogQueryRequest (required)
     * @return ApiResponse&lt;BaseResponsePageLoginLogVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponsePageLoginLogVO> listMyLoginLogVOByPageUsingPOSTWithHttpInfo(LoginLogQueryRequest loginLogQueryRequest) throws ApiException {
        okhttp3.Call call = listMyLoginLogVOByPageUsingPOSTValidateBeforeCall(loginLogQueryRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponsePageLoginLogVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listMyLoginLogVOByPage (asynchronously)
     * 
     * @param loginLogQueryRequest loginLogQueryRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listMyLoginLogVOByPageUsingPOSTAsync(LoginLogQueryRequest loginLogQueryRequest, final ApiCallback<BaseResponsePageLoginLogVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listMyLoginLogVOByPageUsingPOSTValidateBeforeCall(loginLogQueryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponsePageLoginLogVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
